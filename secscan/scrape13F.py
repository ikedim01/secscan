# AUTOGENERATED! DO NOT EDIT! File to edit: 07_scrape13F.ipynb (unless otherwise specified).

__all__ = ['default13FDir', 'findChildEndingWith', 'findChildSeries', 'getRowInfo', 'parse13FHoldings', 'scraper13F',
           'callOptPat', 'putOptPat', 'condenseHoldings', 'get13FAmendmentType', 'indexMap', 'getHoldingsMap',
           'addHoldingsMap', 'holdingsMapToMatrix', 'getPeriodAndNextQStartEnd', 'getNSSForQ', 'saveConvMatrixPy2',
           'qStartEnds', 'qPeriods']

# Cell

import collections
import itertools
import numpy as np
import os
import re

from secscan import utils, dailyList, basicInfo, infoScraper

default13FDir = os.path.join(utils.stockDataRoot,'scraped13F')

# Cell

def findChildEndingWith(el,tagEnd) :
    "Finds first child of an XML element with tag ending in tagEnd (case insensitive)."
    tagEnd = tagEnd.lower()
    for child in el :
        if child.tag.lower().endswith(tagEnd) :
            return child
    return None

def findChildSeries(el,tagEnds) :
    "Finds a nested series of children by tag using findChildEndingWith"
    for tagEnd in tagEnds :
        el = findChildEndingWith(el,tagEnd)
    return el

callOptPat = re.compile(r'call\s*opt',re.IGNORECASE)
putOptPat = re.compile(r'put\s*opt',re.IGNORECASE)

def getRowInfo(row) :
    """
    Returns information for a row in a 13F table in the form:
        (cusip, name, value, title, count, putCall)
    where the field values are as given in the table,
    except putCall is 'CALL', 'PUT', or ''.
    """
    cusip = findChildEndingWith(row,'cusip').text.upper().strip()
    name = findChildEndingWith(row,'issuer').text.strip()
    value = findChildEndingWith(row,'value').text.strip()
    title = findChildEndingWith(row,'titleOfClass').text.upper().strip()
    shrsOrPrnEl = findChildEndingWith(row,'shrsOrPrnAmt')
    count = findChildEndingWith(shrsOrPrnEl,'sshPrnamt').text.strip()
    #countType = findChildEndingWith(shrsOrPrnEl,'sshPrnamtType').text.upper()
    putCallEl = findChildEndingWith(row,'putCall')
    if putCallEl is None :
        putCallEl = findChildEndingWith(shrsOrPrnEl,'putCall')
        #if putCallEl is not None :
        #    print('found putcall in shrsOrPrn')
    if putCallEl is not None :
        putCall = putCallEl.text.upper().strip()
    elif callOptPat.search(name) or title.startswith('CALL') or title=='CAL' :
        putCall = 'CALL'
    elif putOptPat.search(name) or title.startswith('PUT') :
        putCall = 'PUT'
    else :
        putCall = ''
    return (cusip, name, value, title, count, putCall)

def parse13FHoldings(accNo, formType=None) :
    """
    Parses a 13F filing, returning the result in the form:
    {
        'period': 'YYYY-MM-DD',
        'acceptDate': 'YYYY-MM-DD',
        'acceptTime': 'HH:MM:SS',
        'cik' : 'DDDDDDDDDD',
        'holdings': [(cusip, name, value, title, count, putCall), ... ]
    }
    where the field values are as given in the table,
    except putCall is 'CALL', 'PUT', or ''.
    """
    info = basicInfo.getSecFormInfo(accNo, formType)
    xmlUrls = [l[-1] for l in info['links'] if l[0].lower().endswith('xml')]
    if len(xmlUrls) == 1 :
        xmlSummTab = utils.downloadSecUrl(xmlUrls[0],toFormat='xml')
        tot = int(findChildSeries(xmlSummTab,['formdata','summarypage','tableentrytotal']).text.strip())
        if tot == 0 :
            print('*** zero total, table not present')
        else :
            print('*** nonzero total, but table not present')
        holdings = []
    else :
        xmlTab = utils.downloadSecUrl(xmlUrls[-1],toFormat='xml')
        tabRows = [tabRow for tabRow in xmlTab
                   if tabRow.tag.lower().endswith('infotable')]
        if len(xmlTab) != len(tabRows) :
            print('*** #rows mismatch',len(xmlTab),'all children',len(tabRows),'table rows')
        if len(tabRows) == 0 :
            print('*** no holdings in table')
        holdings = [getRowInfo(tabRow) for tabRow in tabRows]
    if len(info['ciks']) != 1 :
        print('*** unexpected number of CIKs!=1',info['ciks'])
    return {'period': info['period'],
            'acceptDate': info['acceptDate'],
            'acceptTime': info['acceptTime'],
            'cik': info['ciks'][0],
            'holdings': holdings}

class scraper13F(infoScraper.scraperBase) :
    def __init__(self, infoDir=default13FDir, startD=None, endD=None, fSuff='m.pkl', **pickle_kwargs) :
        super().__init__(infoDir, '13F-HR', startD=startD, endD=endD, fSuff=fSuff, **pickle_kwargs)
    def scrapeInfo(self, accNo, formType=None) :
        return parse13FHoldings(accNo, formType), None

# Cell

def condenseHoldings(holdings, minFrac=0.0, maxFrac=1.0,
                     pctFormat=False, includeName=False, cusipNames={},
                     minStocksPerInv=None, maxStocksPerInv=None, minTop10Frac=None, minAUM=None) :
    """
    Converts a list of of stock and option holdings as parsed from the 13F:
        [(cusip, name, value, title, count, putCall), ... ]
    that may have multiple entries per stock into a condensed list that omits
    call/put options and only has one combined entry per stock:
        [(cusip, val, frac) ... ]
    sorted in descending order by value, and restricted to stocks with fraction
    of total portfolio in [minFrac..maxFrac]

    If pctFormat is True, frac is returned as a string in the format N.NN%
    If includeName is True, the cusip name is also returned:
        [(cusip, name, val, frac) ... ]

    If minStocksPerInv, maxStocksPerInv, minTop10Frac or minAUM are specified, returns None
    for lists with too few stocks, too many stocks, too small a fraction in the
    top 10 stocks, or too small a total value.
    """
    if includeName :
        cusipToName = dict((cusip,name)
                           for cusip, name, value, shType, nShares, putCall in holdings)
    holdings = sorted((cusip, float(value))
                      for cusip, name, value, shType, nShares, putCall in holdings
                      if putCall=='')
    holdings = [(cusip, sum(val for _,val in it))
                for cusip,it in itertools.groupby(holdings, key=lambda x : x[0])]
    if ((minStocksPerInv is not None and minStocksPerInv > len(holdings))
            or (maxStocksPerInv is not None and maxStocksPerInv < len(holdings))) :
        return None
    holdings.sort(key = lambda x : x[1], reverse=True)
    tot = sum(val for _,val in holdings)
    if ((minAUM is not None and minAUM > tot*1000.0)
            or (minTop10Frac is not None and minTop10Frac*tot > sum(val for _,val in holdings[:10]))) :
        return None
    res = []
    for cusip,val in holdings :
        frac = val/tot if tot>0.0 else 0.0
        if frac > maxFrac :
            # skip holdings with fraction too large
            continue
        if minFrac > frac :
            # holdings list is sorted in descending order by fraction, so we can stop here
            break
        fracOut = f'{frac:.2%}' if pctFormat else frac
        if includeName :
            res.append((cusip, cusipNames.get(cusip,cusipToName[cusip]), val, fracOut))
        else :
            res.append((cusip, val, fracOut))
    return res

def get13FAmendmentType(accNo, formType=None) :
    """
    Gets the amendment type for a 13F-HR/A filing - may be RESTATEMENT or NEW HOLDINGS.
    This turned out to be unreliable (often missing or wrong), so I don't use it to get
    the combined holdings for an investor. Instead I just look at the number of holdings
    in an amendment compared to the previous filing, and treat it as a restatement
    if the new number of holdings is more than half the old number.
    """
    info = basicInfo.getSecFormInfo(accNo, formType)
    xmlUrls = [l[-1] for l in info['links'] if l[0].lower().endswith('xml')]
    xmlSummTab = utils.downloadSecUrl(xmlUrls[0],toFormat='xml')
    coverPage = findChildSeries(xmlSummTab,['formdata','coverpage'])
    isAmendment = findChildEndingWith(coverPage,'isamendment')
    if isAmendment is None or isAmendment.text.strip().lower() not in ['true','yes'] :
        return None
    return findChildSeries(coverPage,['amendmentinfo','amendmenttype']).text.strip()

def indexMap(lis) :
    "Converts a list to a dict mapping item -> index in the list."
    return dict((el,i) for i,el in enumerate(lis))

def getHoldingsMap(scraped13F, period, minFrac=0.0, maxFrac=1.0,
                   minStocksPerInv=None, maxStocksPerInv=None, minTop10Frac=None, minAUM=None) :
    """
    Consolidate holdings for each CIK based on all filings for a given period into
    a combined map of investor holdings.

    Returns a dict: cik -> {cusip -> pct}

    Restricts to stocks only (no call/put options).

    If minFrac and/or maxFrac is supplied, restricts to stocks with with fraction of
    total portfolio >=minFrac and/or <=maxFrac.

    If minStocksPerInv, maxStocksPerInv, minTop10Frac or minAUM are specified, omits
    investors with too few stocks, too many stocks, too small a fraction in the
    top 10 stocks, or too small a total stock value.
    """
    for v,msg in [(minFrac,'min stock fraction of portfolio'),
                  (maxFrac,'max stock fraction of portfolio'),
                  (minStocksPerInv,'min stocks per investor'),
                  (maxStocksPerInv,'max stocks per investor'),
                  (minTop10Frac,'min fraction of portfolio in top 10 positions'),
                  (minAUM,'min AUM (total portfolio value)')] :
        if v is not None :
            print(msg,v)
    #
    # Map cik to a list [(dateStr, accNo, holdingsList) ... ]
    # of all 13F filings from that cik with the given period.
    cikTo13Fs = collections.defaultdict(list)
    count = 0
    for dStr, accNoToInfo in scraped13F.infoMap.items() :
        for accNo, info in accNoToInfo.items() :
            if info == 'ERROR' :
                print('ERR',accNo)
            elif info['period'] == period :
                cikTo13Fs[info['cik'].lstrip('0')].append((dStr, accNo, info['holdings']))
                count += 1
    print('period',period,'- total of',len(cikTo13Fs),'ciks,',count,'13F filings')
    #
    # Get a consolidated list of positions for each cik. For ciks with multiple filings
    # this may involve combining amended filings. Since the filed amendment type is
    # unreliable I use a simple rule of thumb - if the amendment has more than half
    # as many positions as the previous filing I assume it's a restatement, otherwise
    # I add its positions to the previous filing.
    cikToPosList = {}
    for cik, cik13FList in cikTo13Fs.items() :
        cik13FList.sort()  # sort by day and then by accession number
        i = 0
        j = 1
        while j < len(cik13FList) :
            if len(cik13FList[j][2]) > len(cik13FList[i][2])//2 :
                # relatively many new positions - assume filing j is a restatement
                i = j
            j += 1
        if j != 1 :
            print('CIK',cik,i,'-',j,[(dStr,accNo,len(holdings))
                                     for dStr,accNo,holdings in cik13FList])
        combHoldings = cik13FList[i][2]
        while i+1 < j :
                i += 1
                combHoldings = combHoldings + cik13FList[i][2]
        posList = condenseHoldings(combHoldings, minFrac=minFrac, maxFrac=maxFrac,
                                minStocksPerInv=minStocksPerInv, maxStocksPerInv=maxStocksPerInv,
                                minTop10Frac=minTop10Frac, minAUM=minAUM)
        if posList is not None :
            cikToPosList[cik] = posList
    res = {}
    for cik,posList in cikToPosList.items() :
        res[cik] = dict((cusip,frac) for cusip,_,frac in posList)
    return res

def addHoldingsMap(holdingsMap, extraHoldingsMap) :
    """
    Adds positions in extraHoldingsMap to holdingsMap.
    Each argument is a dict: cik -> {cusip -> pct}
    but extraHoldingsMap may contain ciks and cusips not in holdingsMap.
    """
    for cik,extraPosMap in extraHoldingsMap.items() :
        if cik not in holdingsMap :
            holdingsMap[cik] = {}
        posMap = holdingsMap[cik]
        for cusip,frac in extraPosMap.items() :
            posMap[cusip] = posMap.get(cusip,0.0) + frac

def holdingsMapToMatrix(holdingsMap, minInvestorsPerStock=None, maxInvestorsPerStock=None,
                        dtype=np.float64) :
    """
    Converts a holdings map: cik -> {cusip -> frac} into a matrix.

    Returns mat, ciks, cusips where mat is a matrix of shape (len(ciks), len(cusips))
    in which each row has the fractions held by the corresponding cik in each cusip.

    If minInvestorsPerStock is specified, restricts to stocks with at least that many investors.
    If maxInvestorsPerStock is specified, restricts to stocks with at most that many investors.
    """
    cusipCounts = collections.Counter()
    for posMap in holdingsMap.values() :
        cusipCounts.update(posMap.keys())
    cusipsToRemove = set()
    delCount = 0
    if minInvestorsPerStock is None and maxInvestorsPerStock is None :
        print('not limiting number of investors per stock')
    else :
        if minInvestorsPerStock is not None :
            cusipsToRemove.update(cusip for cusip,count in cusipCounts.items() if count<minInvestorsPerStock)
            print('requiring at least',minInvestorsPerStock,'investors per stock -',
                  'removed',len(cusipsToRemove),'stocks')
            delCount = len(cusipsToRemove)
        if maxInvestorsPerStock is not None :
            cusipsToRemove.update(cusip for cusip,count in cusipCounts.items() if count>maxInvestorsPerStock)
            print('requiring at most',maxInvestorsPerStock,'investors per stock -',
                  'removed',len(cusipsToRemove)-delCount,'stocks')
    cusips = sorted(set(cusipCounts.keys()) - cusipsToRemove)
    ciks = sorted(cik for cik,posMap in holdingsMap.items()
                  if any((cusip not in cusipsToRemove) for cusip in posMap))
    if len(ciks) < len(holdingsMap) :
        print('removed',len(holdingsMap)-len(ciks),'investors with no remaining positions')
    print(f'final counts: {len(ciks):,} investors; {len(cusips):,} stocks;',end=' ')
    cikToRow = indexMap(ciks)
    cusipToCol = indexMap(cusips)
    mat = np.zeros((len(ciks), len(cusips)), dtype=dtype)
    count = 0
    for cik,posMap in holdingsMap.items() :
        if cik not in cikToRow :
            continue
        cikRow = cikToRow[cik]
        for cusip,frac in posMap.items() :
            if cusip not in cusipsToRemove :
                mat[cikRow, cusipToCol[cusip]] = frac
                count += 1
    print(f'{count:,} positions')
    return mat, ciks, cusips

qStartEnds = ['0101','0401','0701','1001','0101']
qPeriods = ['-03-31','-06-30','-09-30','-12-31']
def getPeriodAndNextQStartEnd(y, qNo) :
    """
    Returns the 13F period date for a given year and quarter number (this is the
    last day in the quarter), along with the start and end dateStrs for the next
    quarter (this is the date range when the 13Fs for this year should be filed).
    Quarters are numbered 1-4.
    """
    nextY = y+1 if qNo==4 else y
    nextQNo = 1 if qNo==4 else qNo+1
    return (str(y)+qPeriods[qNo-1],
            {'startD' : str(nextY) + qStartEnds[nextQNo-1],
             'endD' : str(nextY+1 if nextQNo==4 else nextY) + qStartEnds[nextQNo]})

def getNSSForQ(y, qNo, minFrac=0.01, maxFrac=1.0, minStocksPerInv=3, maxStocksPerInv=100,
               minTop10Frac=0.4, minAUM=None, dtype=np.float64,
               minInvestorsPerStock=2, maxInvestorsPerStock=None,
               extraHoldingsMaps = []) :
    """
    Calculates a matrix of investor holdings for a quarter, based on all 13F filings filed
    during the succeeding quarter.

    Returns mat, ciks, cusips where mat is a matrix of shape (len(ciks), len(cusips))
    in which each row has the fractions held by the corresponding cik in each cusip.

    If minFrac and/or maxFrac is supplied, restricts to stocks with with fraction of
    total portfolio >=minFrac and/or <=maxFrac.

    If minStocksPerInv, maxStocksPerInv, minTop10Frac or minAUM are specified, omits
    investors with too few stocks, too many stocks, too small a fraction in the
    top 10 holdings, or too small a total stock value.
    If minInvestorsPerStock is specified, restricts to stocks with at least that many investors.
    If maxInvestorsPerStock is specified, restricts to stocks with at most that many investors.

    Optionally adds holdings from a list of extraHoldingsMaps (used for 13G/13D filings).
    """
    period, nextQStartEnd = getPeriodAndNextQStartEnd(y,qNo)
    holdingsMap = getHoldingsMap(scraper13F(**nextQStartEnd), period,
                                 minFrac=minFrac, maxFrac=maxFrac,
                                 minStocksPerInv=minStocksPerInv, maxStocksPerInv=maxStocksPerInv,
                                 minTop10Frac=minTop10Frac, minAUM=minAUM)
    for extraHoldingsMap in extraHoldingsMaps :
        addHoldingsMap(holdingsMap,extraHoldingsMap)
    return holdingsMapToMatrix(holdingsMap, minInvestorsPerStock=minInvestorsPerStock,
                               maxInvestorsPerStock=maxInvestorsPerStock, dtype=dtype)

def saveConvMatrixPy2(y, qNo, minFrac=0.13, maxFrac=0.4, minStocksPerInv=3, maxStocksPerInv=500,
                      minTop10Frac=None, minAUM=7.5e7, dtype=np.float64,
                      minInvestorsPerStock=2, maxInvestorsPerStock=None) :
    """
    Save a matrix of 13F conviction positions only for the given quarter,
    in a format readable by the BW old Python2 version.
    """
    mat, ciks, cusips = getNSSForQ(y, qNo, minFrac=minFrac, maxFrac=maxFrac,
                                   minStocksPerInv=minStocksPerInv, maxStocksPerInv=maxStocksPerInv,
                                   minTop10Frac=minTop10Frac, minAUM=minAUM, dtype=dtype,
                                   minInvestorsPerStock=minInvestorsPerStock,
                                   maxInvestorsPerStock=maxInvestorsPerStock)
    ciks = [cik.zfill(10).encode(encoding='ascii',errors='ignore') for cik in ciks]
    cusips = [cusip.encode(encoding='ascii',errors='ignore') for cusip in cusips]
    m = ([[('0' if el==0.0 else str(el)).encode(encoding='ascii') for el in row] for row in mat],
         ciks, indexMap(ciks), cusips, indexMap(cusips))
    fPath = os.path.join(utils.stockDataRoot,f'Conv{y}Q{qNo}.pkl')
    print('saving to',fPath)
    utils.pickSave(fPath, m, fix_imports=True, protocol=2)