# AUTOGENERATED! DO NOT EDIT! File to edit: 08_scrape8K.ipynb (unless otherwise specified).

__all__ = ['default8KDir', 'parse8K', 'getSecItemsFromTextUsingPat', 'getSecItemsFromText', 'getSec8KItemsFromText',
           'scraper8K', 'itemPat', 'secItemHeaderPatStrs', 'secItemPats', 'financialStatementsPat']

# Cell

import collections
import itertools
import os
import re

from secscan import utils, dailyList, basicInfo, infoScraper

default8KDir = os.path.join(utils.stockDataRoot,'scraped8K')

# Cell

itemPat = re.compile(r'item\s*(\d+(?:\.\d*)?)',re.IGNORECASE)
def parse8K(accNo, formType=None, textLimit=basicInfo.defaultTextLimit) :
    info = basicInfo.getSecFormInfo(accNo, formType=formType, get99=True, textLimit=textLimit)
    links = info['links']
    if len(links) == 0 :
        utils.printErrInfoOrAccessNo('NO LINKS LIST in',accNo)
        return info
    items = info.get('items',[])
    if len(items) == 0 :
        return info
    mainText = utils.downloadSecUrl(links[0][3], toFormat='souptext')
    itemPosL = [0]
    info['itemTexts'] = itemTexts = [None for item in items]
    for i,item in enumerate(items) :
        m = itemPat.match(item)
        if m is None :
            utils.printErrInfoOrAccessNo(f"unexpected format for item header {item}",accNo)
            continue
        m = re.search(r'item\s*'+m.group(1), mainText[itemPosL[-1]:], re.IGNORECASE)
        if m is None :
            utils.printErrInfoOrAccessNo(f"couldn't find {item}",accNo)
            continue
        itemPosL.append(itemPosL[-1]+m.start())
        itemTexts[i] = ''
        # print('pos for',item,itemPosL[-1])
    itemPosL.append(len(mainText))
    j = 1
    for i in range(len(itemTexts)) :
        if itemTexts[i] is None :
            itemTexts[i] = items[i] + ' ???'
        else :
            itemTexts[i] = mainText[itemPosL[j] : min(itemPosL[j]+textLimit, itemPosL[j+1])]
            j += 1
    return info
#     print(firstSLText)
#     print 'size',len(firstSLText)
#     print utils.secUrlPref+links[0][3]
#     info['itemsdetail'] = getSec8KItemsFromText(firstSLText)
#     if info['itemsdetail'] == [] :
#         print('NO ITEMS:',utils.secUrlPref+links[0][3])
#     else :
#         print('.', #info['itemsdetail'],
#               end=' ')
#     return info

secItemHeaderPatStrs = [
    r'item[^a-z]*?(\d+(?:\.\d*)?)\.(?!\d)',
    r'item[^a-z]*?(\d+(?:\.\d*)?)(?=[a-z\s]*[.:])',
]
secItemPats = [re.compile(secItemHeaderPatStr
                            + r'\s*(.{80,}?)('+secItemHeaderPatStr+'|$)',
                            re.IGNORECASE)
                for secItemHeaderPatStr in secItemHeaderPatStrs]

def getSecItemsFromTextUsingPat(txt, secItemPat, filterF=None ,maxHeadLen=80, maxBodyLen=500) :
    pos = 0
    res = []
    while True :
        m = secItemPat.search(txt,pos)
        if m is None :
            return res
        g = m.groups()
        if len(res)>0 and res[-1][0] == g[0] :
            pos = m.start()+1
        else :
            head = g[1][:maxHeadLen]
            #if head.find('.') >= 0 :
            #    head = head[:head.find('.')+1]
            newTup = (g[0],head,g[1][:maxBodyLen])
            pos = m.start(3)
            if (filterF is None) or filterF(newTup) :
                res.append(newTup)

def getSecItemsFromText(txt, filterF=None, maxHeadLen=80, maxBodyLen=500) :
    """
    Returns a list of item summaries for items from 8-K and SC 13D forms:
        format in form:
            Item 1.01. WWW. YYY ZZZ
            Item 3.01. AAA. BBB CCC
        returned value:
            [('1.01', 'WWW.', 'WWW. YYY ZZZ')
             ('3.01', 'AAA.', 'AAA. BBB CCC') ... ]
    """
    for secItemPat in secItemPats :
        res = getSecItemsFromTextUsingPat(txt,secItemPat,filterF,maxHeadLen,maxBodyLen)
        if res :
            break
    return res

financialStatementsPat = re.compile(r'[^a-z]*financial\s*statements',
                                    re.IGNORECASE)
def getSec8KItemsFromText(txt) :
    """
    Returns list of item summaries for 8-K forms, ignoring the
    'Financial Statements and Exhibits' item.
    """
    return getSecItemsFromText(txt, lambda item : not financialStatementsPat.match(item[1]))

class scraper8K(infoScraper.scraperBase) :
    def __init__(self, infoDir=default8KDir, startD=None, endD=None, fSuff='m.pkl', **pickle_kwargs) :
        super().__init__(infoDir, '8-K', startD=startD, endD=endD, fSuff=fSuff, **pickle_kwargs)
    def scrapeInfo(self, accNo, formType=None) :
        return parse8K(accNo, formType), None