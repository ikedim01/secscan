# AUTOGENERATED! DO NOT EDIT! File to edit: 03_tickerMap.ipynb (unless otherwise specified).

__all__ = ['getSecTickerDict', 'getCikToTickersMap', 'getCikToFirstTickerMap', 'secTickerListUrl']

# Cell

import collections

from secscan import utils

# Cell

secTickerListUrl = '/files/company_tickers_exchange.json'

def getSecTickerDict(field1='ticker', field2='cik', multiValue='last') :
    """
    Return mappings among ticker, cik, name, and exchange based on a
    downloaded list from the SEC. Returns a dict: field1 -> field2 values.

    The multivalue argument specifies how to handle multiple field2 values
    found for the same field1 value:
    'list' - stores a list of all field2 values found
    'first' - just stores the first field2 value found
    'last' - just stores the last field2 value found
    """
    secTickerJson = utils.downloadSecUrl(secTickerListUrl, toFormat='json')
    fieldList, dataList = secTickerJson['fields'], secTickerJson['data']
    field1Pos, field2Pos = fieldList.index(field1), fieldList.index(field2)
    print('SEC ticker list length',len(dataList),
          'with',len(set(tup[field1Pos] for tup in dataList)),'unique values')
    res = collections.defaultdict(list) if multiValue=='list' else {}
    for tup in dataList :
        field1Val, field2Val = str(tup[field1Pos]), str(tup[field2Pos])
        if multiValue=='list' :
            res[field1Val].append(field2Val)
        elif multiValue=='last' or field1Val not in res :
            res[field1Val] = field2Val
    print('result has',len(res),'keys',end='')
    if multiValue != 'list' :
        print(' with',len(set(res.values())),'unique values',end='')
    print()
    return res

def getCikToTickersMap() :
    """
    Returns a dict: cik -> <list of corresponding tickers from the SEC list>
    """
    return getSecTickerDict(field1='cik', field2='ticker', multiValue='list')

def getCikToFirstTickerMap() :
    """
    Returns a dict: cik -> <first ticker for cik found on the SEC list>
    """
    return getSecTickerDict(field1='cik', field2='ticker', multiValue='first')


## Old code using company_tickers.json:
# def getCikToTickersMap() :
#     """
#     Retrieves and parses an SEC-maintained list mapping tickers to CIKs.
#     Returns a defaultdict: cik -> list of corresponding tickers
#     """
#     tickersJSON = utils.downloadSecUrl('/files/company_tickers.json', toFormat='json')
#     cikToTickers = collections.defaultdict(list)
#     for v in tickersJSON.values() :
#         cikToTickers[str(v['cik_str'])].append(v['ticker'])
#     return cikToTickers