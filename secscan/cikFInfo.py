# AUTOGENERATED! DO NOT EDIT! File to edit: 13_cikFinfo.ipynb (unless otherwise specified).

__all__ = ['defaultCikFInfoDir', 'allScraperClasses', 'cikFPrefLen', 'getCikFInfoDirAndPath', 'jsonValError',
           'loadCikFInfo', 'saveCikFInfo', 'modifyInfoForDisp', 'getDatesPresent', 'saveAllCikFInfo', 'clearDateRange',
           'prSample', 'saveYears', 'printedM']

# Cell

import collections
import json
import os

from secscan import utils, dailyList
from secscan import scrape13F, scrape8K, scrape6K, scrape13G, scrape13D, scrape4

defaultCikFInfoDir = os.path.join(utils.stockDataRoot,'cikFInfo')
allScraperClasses = [scrape13F.scraper13F,scrape8K.scraper8K,scrape6K.scraper6K,
                     scrape13G.scraper13G,scrape13D.scraper13D,scrape4.scraper4]
cikFPrefLen = 4

# Cell

def getCikFInfoDirAndPath(cik, cikFInfoDir=defaultCikFInfoDir) :
    if len(cik)<2 or not cik.isdigit() or cik[0]=='0' :
        raise ValueError(f'invalid CIK "{cik}"')
    fDir = os.path.join(cikFInfoDir,cik[:cikFPrefLen])
    return fDir,os.path.join(fDir,cik+'.json')

def jsonValError(msg, s) :
    if len(s) > 200 :
        s = s[:100] + ' ... ' + s[-100:]
    return ValueError(msg + ' in ' + s)

def loadCikFInfo(cik, cikFInfoDir=defaultCikFInfoDir, returnAsText=False) :
    cik = str(cik).lstrip('0')
    fPath = getCikFInfoDirAndPath(cik, cikFInfoDir)[1]
    if not os.path.exists(fPath) :
        cikFInfoText = ""
    else :
        with open(fPath,'r',encoding='ascii') as f :
            cikFInfoText = f.read().strip()
        if cikFInfoText[-1] != ',' :
            raise jsonValError('missing ending ,', cikFInfoText)
        cikFInfoText = cikFInfoText[:-1]
    return cikFInfoText if returnAsText else json.loads('{'+cikFInfoText+'}')

printedM=False

def saveCikFInfo(cik, cikFInfo, removeDups=False, cikFInfoDir=defaultCikFInfoDir) :
    global printedM
    if removeDups :
        existingCikFInfo = loadCikFInfo(cik, cikFInfoDir=cikFInfoDir)
        cikFInfo = json.loads(json.dumps(cikFInfo))
        cikFInfo = dict((k,v)
                        for k,v in cikFInfo.items()
                        if not ((k in existingCikFInfo) and existingCikFInfo[k]==v))
        if len(cikFInfo)>0 and not printedM :
            print(cikFInfo)
            printedM = True
    if len(cikFInfo) == 0 :
        return 0
    s = json.dumps(cikFInfo, indent=0).strip()
    if s[0]!='{' or s[-1]!='}' :
        raise jsonValError('missing start/end {}', s)
    fDir, fPath = getCikFInfoDirAndPath(cik, cikFInfoDir)
    if not os.path.exists(fDir) :
        os.makedirs(fDir)
    with open(fPath,'a',encoding='ascii') as f :
        f.write(s[1:-1])
        f.write(',\n')
    return 1

def modifyInfoForDisp(info, scraper, cikNames) :
    if info == 'ERROR' :
        return
    if scraper.formClass.startswith('SC 13') :
        # fill in cik names
        if 'ciks' in info :
            info['cikNames'] = []
            for cik in info['ciks'] :
                info['cikNames'].append(cikNames.get(cik.lstrip('0'),
                                                     ('CIK'+cik.lstrip('0'),))[0])
    elif scraper.formClass.startswith('INSIDER') :
        issuerCik = None
        for cik,cikType in zip(info['ciks'],info['cikTypes']) :
            if cikType == 'Issuer' :
                issuerCik = cik
                break
        if issuerCik is not None :
            info['issuerName'] = cikNames.get(issuerCik.lstrip('0'),
                                              ('CIK'+issuerCik.lstrip('0'),))[0]
    elif scraper.formClass.startswith('13F') :
        info['holdings'] = scrape13F.get13FHoldingsReportList(info['holdings'],
                                                              minFrac=0.01)

def getDatesPresent(cikFInfoDir=defaultCikFInfoDir) :
    datesPresent = utils.loadPklFromDir(cikFInfoDir, "dates.pkl", set())
    print(len(datesPresent),'dates present')
    return datesPresent

def saveAllCikFInfo(startD, endD, scraperClasses,
                    removeDups=True, cikFInfoDir=defaultCikFInfoDir, ciks=None) :
    dl = dailyList.dailyList(startD=startD, endD=endD)
    datesPresent = getDatesPresent(cikFInfoDir=cikFInfoDir)
    cikInfoMap = {}
    for scraperClass in scraperClasses :
        scraper = scraperClass(startD=startD, endD=endD)
        for dInfo in scraper.infoMap.values() :
            for info in dInfo.values() :
                modifyInfoForDisp(info, scraper, dl.cikNames)
        scraper.addToCikInfoMap(dl, cikInfoMap, ciks=ciks, excludeDates=datesPresent)
    cikModCount = 0
    for cik,cikFInfo in cikInfoMap.items() :
        if (ciks is not None and cik not in ciks) :
            continue
        cikModCount += saveCikFInfo(cik, cikFInfo, removeDups=removeDups, cikFInfoDir=cikFInfoDir)
    print('saved new info for',cikModCount,'CIKs')
    datesPresent.update(dl.dl.keys())
    print('now',len(datesPresent),'dates present')
    utils.savePklToDir(cikFInfoDir, "dates.pkl", datesPresent)

def clearDateRange(startD=None, endD=None, cikFInfoDir=defaultCikFInfoDir) :
    datesPresent = getDatesPresent(cikFInfoDir=cikFInfoDir)
    datesPresent = set(d for d in datesPresent
                       if not (
                           ((startD is None) or startD<=d)
                           and ((endD is None) or d<endD)
                       ))
    print('now',len(datesPresent),'dates present')
    utils.savePklToDir(cikFInfoDir, "dates.pkl", datesPresent)

def prSample(s, n=2, filterF=lambda x : True) :
    res = []
    for dStr,dInfo in s.infoMap.items() :
        for accNo,info in dInfo.items() :
            if filterF(info) :
                print(dStr,accNo,info)
                res.append(info)
                if len(res) >= n :
                    return (res[0] if n==1 else res)

def saveYears(startY, endY,
              removeDups=False, cikFInfoDir=defaultCikFInfoDir, ciks=None) :
    qList = ['0101', '0401', '0701', '1001', '0101']
    for y in range(startY, endY) :
        for qs, qe in zip(qList, qList[1:]) :
            startD, endD = f'{y}{qs}', f'{y+1 if qe=="0101" else y}{qe}'
            print(startD, endD)
            saveAllCikFInfo(startD, endD, allScraperClasses,
                            removeDups=removeDups, cikFInfoDir=cikFInfoDir, ciks=ciks)