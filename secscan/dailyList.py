# AUTOGENERATED! DO NOT EDIT! File to edit: 02_dailyList.ipynb (unless otherwise specified).

__all__ = ['defaultDLDir', 'getQStr', 'getSecDailyIndexUrls', 'getDailyFList', 'edgarTxtFPat', 'isInFormClass',
           'namedFormClasses', 'noPeriodFormTypes']

# Cell

import csv
import os
import re

from secscan import utils,recentFeed

defaultDLDir = os.path.join(utils.stockDataRoot,'dlMaps')

# Cell

def getQStr(dateStr) :
    """
    Converts a date in YYYYMMDD format to YYYY/QTRn/
    where n is the quarter number from 1 to 4."
    """
    return dateStr[:4] + '/QTR' + str((int(dateStr[4:6])+2) // 3) + '/'

def getSecDailyIndexUrls(dateStr) :
    base = '/Archives/edgar/daily-index/'+getQStr(dateStr)
    return (base+'master.'+dateStr+'.idx', base+'index.json')

edgarTxtFPat = re.compile(
            # gets cik and accession no from a file url within the daily index
            r"\s*edgar/data/(\d+)" # cik - should be same as on the index line
            + r"/("+utils.accessNoPatStr+r")\.txt\s*$", # accession no
            re.IGNORECASE)

def getDailyFList(d, listIndexCache=None) :
    """
    Returns a list of SEC filed forms:
        [(cik, cikName, formType, fileDate, accNo), ... ]
    for the given date or ISO date string, retrieved from
    the SEC daily index.
    """
    dateStr = utils.toDateStr(d)
    listUrl, listIndexUrl = getSecDailyIndexUrls(dateStr)
    if listIndexCache is None or listIndexUrl not in listIndexCache :
        listIndexJson = utils.downloadSecUrl(listIndexUrl, toFormat='json')
        listIndex = set(item['name'] for item in listIndexJson['directory']['item']
                        if item['name'].startswith('master'))
        print(f'### list index {len(listIndex)}',end=' ')
        if listIndexCache is not None :
            listIndexCache[listIndexUrl] = listIndex
    else :
        listIndex = listIndexCache[listIndexUrl]
    if 'master.'+dateStr+'.idx' not in listIndex :
        print('HOLIDAY',end=' ')
        return []
    fListRes = utils.downloadSecUrl(listUrl)
    r = csv.reader(fListRes.splitlines(), delimiter='|')
    res = []
    for entry in r :
        if len(entry)==5 and entry[0].isdigit() :
            cik, cikName, formType, fileDate, txtF = entry
        else :
            if len(res) > 0 :
                print('invalid entry', entry)
            continue
        m = edgarTxtFPat.match(txtF)
        if not m :
            print('missing accession no in', entry)
            continue
        if m.group(1) != cik :
            print('cik mismatch in', entry)
        res.append((cik,cikName,formType,fileDate,m.group(2)))
    print('filings for',dateStr+':', len(res), end=' ')
    return res

# Cell

namedFormClasses = {  # readable names for some groups of form types
    'ALL' : '',
    'FINANCIAL' : re.compile('10-[KQ]',re.IGNORECASE),
    'ACTIVIST' : 'SC 13D',
    'FIVEPERCENT' : re.compile('SC 13[DG]',re.IGNORECASE),
    'INVESTOR' : '13F-HR',
    'INSIDER' : re.compile('4(?:/A)?$',re.IGNORECASE),
}

noPeriodFormTypes = re.compile('SC 13[DG]|424',re.IGNORECASE)

def isInFormClass(formClass,formType) :
    """
    Says if formType is in formClass, where formClass can be one of the following:
        - None or '' - includes all formTypes
        - namedFormClass - one of the ones above
        - other string - includes formTypes starting with that string
        - regex - includes matching formTypes
    """
    if formClass is None :
        return True
    if isinstance(formClass,str) :
        formClass = formClass.upper()
        if formClass in namedFormClasses :
            formClass = namedFormClasses[formClass]
    if isinstance(formClass,str) :
        return formType.startswith(formClass)
    # else assume it's a regex
    return formClass.match(formType) is not None